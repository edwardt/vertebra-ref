#!/usr/bin/env python2.6
"""A program to make interactive, syntax-highlighted XML displays
"""
# Copyright 2009, Engine Yard, Inc.
# Licensed under the GNU Lesser General Public License, 3.0
from xml.sax.saxutils import escape,quoteattr
from lxml import etree as et
from sys import argv,exit,stderr
from types import StringTypes
from functools import reduce

# Helper Classes
class symbol(object):
  __pool__ = {}

  def __new__(cls,name):
    pool = cls.__pool__
    if not name in pool:
      sym = super(symbol,cls).__new__(cls)
      sym.__symname__ = name
      pool[name] = sym
    return pool[name]

  def __repr__(self):
    return '<symbol %s>' % self.__symname__

class symfactory(object):
  def __getattribute__(self,name):
    if '_' in name:
      return super(symfactory,self).__getattribute__(name)
    else:
      return symbol(name)

sym = symfactory()

# Definitions

# Functions

def concat(list_of_strings):
  return ''.join(list_of_strings)

def flatten(l):
  result = []
  for x in l:
    if isinstance(x, list):
      result.extend(flatten(x))
    else:
      result.append(x)
  return result

def linify(text,delim='\n'):
  if text is None or text == '':
    return
  for line in text.split(delim):
    yield '<div style="margin-left: 1em">'
    yield escape(line)
    yield '</div>'
  
def iscompact(iolist,delim='\n'):
  try:
    if delim in iolist:
      return False
    for entry in iolist:
      if not iscompact(entry):
        return False
  except TypeError: # Iteration Over Non Sequence / No 'in' Method Raises TypeError
    pass
  return True

def getrootlist(tr):
  root = tr.getroot()
  while 1:
    prev = root.getprevious()
    if prev is None:
      break
    root = prev
  rl = []
  while 1:
    rl.append(root)
    next = root.getnext()
    if next is None:
      break
    root = next
  return rl

def listify(el):
  if el.tag is et.Comment:
    yield '<div class="comment" style="margin-left: 1em">'
    yield escape('<!--')
    yield list(linify(el.text))
    yield escape('-->')
    yield '</div>'
  elif el.tag is et.PI:
    # EAT IT!
    pass
  elif isinstance(el.tag,StringTypes):
    att = el.attrib
    ctext = 'class="element"'
    if 'comment' in att:
      ctext = 'class="element hotzone"'
      ctext += ' target=%s' % (quoteattr(att['comment']),)
      del att['comment']
    yield '<div %s style="margin-left: 1em">' % ctext
    yield escape('<')
    yield '<span class="tag">' + el.tag + '</span>'
    kids = bool(len(el)) or el.text
    for k,v in el.attrib.iteritems():
      yield ' <span class="attrkey">'
      yield escape(k)
      yield '</span>=<span class="attrval">'
      yield quoteattr(v)
      yield '</span>'
    if not kids:
      yield escape(' />')
    else:
      yield escape('>')
    for kid in el:
      yield list(listify(kid))
    yield list(linify(el.text))
    if kids:
      yield escape('</')
      yield '<span class="tag">' + el.tag + '</span>'
      yield escape('>')
    yield '</div>'
  else:
    print "Warning, unknown element: %r" % el
  yield list(linify(el.tail))

def convert(tr):
  iolist = [ ['<div>',list(listify(el)),'</div>'] for el in getrootlist(tr) ]
  return iolist
  
if __name__ == '__main__': # Not sure why this would be imported, but...just in case
  # Usage
  try:
    (src,cmt,dst) = argv[1:]
  except:
    print >>stderr, """usage: xml_to_pretty <source> <comment> <destination>"
         <source> should be a file containing an XML document to be highlighted
         <comment> should be xml with <comment> tags
         <destination> should be the file to generate XML into
  
         The comment XML may have a title attribute on the root element that
         will be used as the title of the generated html page
  
         The generated XML will include links to jquery.js and a stylesheet
         determined by the suffix of the source file"""
    exit(1)
  
  print >>stderr, "Initializing..."

  print >>stderr, "Parsing Comments..."
  cmt = open(cmt,"r")
  ctree = et.ElementTree(file=cmt)
  
  comments = list( 
    ( 
      (
        el.attrib["id"],
        el.text + ''.join( 
          (et.tostring(sel) for sel in el) 
        )
      ) for el in ctree.findall("/comment")
    ) 
  )
  
  # Get title of page and css, with sensible defaults
  cattr = ctree.getroot().attrib
  title = escape(cattr.get("title",src))
  css = cattr.get("css","xml") + ".css"
  
  print >>stderr, "Parsing Input..."
  src = open(src,"r")
  stree = et.ElementTree(file=src)
  iolist = convert(stree)
  stlist = flatten(iolist)
  st = concat(stlist)
  #print st
  #exit(0)
  
  print >>stderr, "Opening %s..." % dst
  
  dst = file(dst,"w")
  
  print >>stderr, "Generating Output..."
  
  print >>stderr, " .. header"
  print >>dst, """<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
  <html>
    <head>
      <title>%s</title>
      <link rel="stylesheet" href="base.css" type="text/css" media="screen" />
      <link rel="stylesheet" href="%s" type="text/css" media="screen" />
      <script type="text/javascript" src="jquery.js"></script>
      <script type="text/javascript" src="interact.js"></script>
    </head>
    <body>
      <div id="wrap">""" % (title,css)
  
  print >>stderr, " .. xml"
  print >>dst,'      <div id="escapedxml"><div class="pad">'
  print >>dst,'        <h1 class="title">%s</h1>' % escape(title)
  print >>dst,'        <div class="xmlcontent" style="font-family: Courier, monospace;">'
  
  #FIXME
  print >>dst, st

  print >>dst,'        </div>'
  print >>dst,'      </div></div>'
  print >>dst,'      <div id="commentaccordian"><div class="pad">'
  
  print >>dst,'        <div class="commenthdr" id="header"><p>Click title to see all comments.</p><p>Click individual element text to reveal comments limited to a certain location.</p></div>'
  print >>dst,'        <div class="commenthdr" id="toc"><h3 id="toctitle">Contents</h3><ul id="toclist"></ul></div>'
  for cname,ctext in comments:
    print >>dst,'        <div class="commentbox" id=%s>%s</div>' \
                                                                    % (quoteattr('comment_'+cname),ctext,)
  
  print >>dst,'      </div></div>'
  
  print >>stderr, " .. footer"
  print >>dst, "    </div>"
  print >>dst, "  </body>"
  print >>dst, "</html>"
